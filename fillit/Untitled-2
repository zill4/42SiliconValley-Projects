#include "fillit.h"
#include <fcntl.h>


void    initPoint(t_point *p)
{
    p->x = 0;
    p->y = 0;
}

int     checkFormat(t_block block)
{
    int d;
    int i;
    
    i = 0;
    d = 0;
    while (i < 3)
    {
        d = block.point[i + 1].y - block.point[i].y;
        if (d > 1 || d < -1)
            return (0);
        d = block.point[i + 1].x - block.point[i].x;
        if (d > 1 || d < -1)
            return (0);
        i++;
    }
    return (1);
}

int     addBlockLine(t_block *block, char *line, int *count, int y)
{
    int i;

    i = 0;
    printf("checking length of line: %zu\n", ft_strlen(line));
    printf("String: %s\n", line);
    while(line[i])
    {
        if (line[i] == '#')
        {
            block->point[*count].x = i;
            block->point[*count].y = y;
            *count += 1;
        }
        else if (line[i] != '.' && line[i] != '#')
            return (-1);
        i++;
    }
    if (i != 4)
        return (-1);
    return (1);
}
/*
    Prototype: int parseTetri(t_block *b, int y, char* str)
    Description: partseTetri, pareses a string for '.' && '#'.
                If the '#' are found, they are recorded in t_block.x
                && t_block.y position. A 0 is returned if the line is empty.
                A -1 is returned if the format is bad. A 1 is returned if success.
*/
int parseTetri(t_block *blocks, int *i, int *y, char* str, int *hc)
{
    int x;
    x = 0;
    // if (str == NULL)
    // {
    //     printf("There is nothing here!\n");
    //     return (0);
    // }
    // if (ft_strlen(str) % 4 != 0)
    //     return (-1);
    while (str[x])
    {
        if (str[x] == '#')
        {
            blocks->point[*i].x = x;
            blocks->point[*i].y = *y;
            *hc += 1;
            *i += 1;
        }
        else if (str[x] != '.')
            return (-1);
        x++;
    }
    return (1);
}

/*
    prototype int   checkDim(t_block block)
    Description: checkDim, checks the dimensionality of a block.
                If a block is 1x4, 2x2, or 2x3 and the reverse of those.
                If a block is valid or not, i.e. no 4x2, 3x5, etc.
                Will also set the dimensions of a block. 
                returns 1 if good, 0 if bad.
*/
int     checkDim(t_block *block)
{
    int i;
    int k;
    int x_min;
    int x_max;
    int y_min;
    int y_max;

    i = 0;
    k = 0;
    x_min = block->point[0].x;
    y_min = block->point[0].y;
    x_max = block->point[0].x;
    y_max = block->point[0].y;
    while (i < 4)
    {
        if (block->point[i].x > x_max)
            x_max = block->point[i].x;
        if (block->point[i].x < x_min)
            x_min = block->point[i].x;
        if (block->point[i].y > y_max)
            y_max = block->point[i].y;
        if (block->point[i].y < y_min)
            y_min = block->point[i].y;
        i++;
        if (x_min < 0 || x_max > 3)
            return (0);
    }
   // printf("XMax Dimemsion: %d XMIN Dimension: %d, YMax Dimension: %d, YMin Dimension: %d\n", x_max, x_min, y_max, y_min);
    /* normalize the points such that at least 1 is min 0, for simpler placing */
    if (x_min > 0)
    {
        i = 0;
        while (i < 4)
            block->point[i++].x -= x_min;
    }
    if (y_min > 0)
    {
        i = 0;
        while (i < 4)
            block->point[i++].y -= y_min;
    }
        block->x_dim = (x_max - x_min) + 1;
        block->y_dim = (y_max - y_min) + 1;
    return(1);
}

/*
    prototype void printAll(t_point finalDim, int mapDim)
    Description: printAll takes the maximum dimension of the map.,
                and the worst case scenario 
*/
void    printAll(char map[17][17], int mapDim)
{
    t_point dim;
    int x;
    int y;
    x = 0;
    y = 0;
    dim.x = 0;
    dim.y = 0;
    while ( y < mapDim)
    {
        while (x < mapDim)
        {
            if (map[y][x] != '.' && (y >= dim.y))
                dim.y = y;
            if (map[y][x] != '.' && (x >= dim.x))
                dim.x = x;
            
            x++;
        }
        x = 0;
        y++;
    }
    x = 0;
    y = 0;
    if ( dim.x >= dim.y )
        dim.y = dim.x;
    else
        dim.x = dim.y;
    while (y < dim.y + 1)
    {
        while (x < dim.x + 1)
        {
            ft_putchar(map[y][x]);
            x++;
        }
        ft_putchar('\n');
        x = 0;
        y++;
    }
}
/*   
    prototype void    printMapPls(map, sizeofmap)
    Description:    Will print the map for the given size.
*/
void    printMapPls(char map[17][17], int mapSize)
{
    int k = 0;
    for(int i = 0; i < mapSize; i++)
    {
        for (k = 0; k < mapSize; k++)
        {
            ft_putchar(map[i][k]);
        }
        ft_putchar('\n');
       k = 0;
    }
}

/*
    prototype void  initMap(char **map, int dim)
        initMap takes a pointer to a map, initializes the map to a series of '.''s
*/
void  initMap(char map[17][17], int dim)
{

    int x;
    int y;

    x = 0;
    y = 0;
    while(y < dim)
    {
        while(x < dim)
        {
            map[y][x] = '.';
            x++;
        }

        map[y][x] = '\0';
        x = 0;
        y++;
    }
}
/*
    protoype  int   placePoint(char **map, t_block *blocks, t_point mapPoints, int index)
    Description:  Tries to recursively place a point based on the mapPoints location in the map.
                Points are placed till the either the block is finished or a spot is not available.
                If a spot is not free the function is called again with a change in first the x position, then the y position.
                Should not happen but if a spot just cannot befound a critical error is thrown.
*/
int         checkMap(char map[17][17], t_block block, int mapSize, int l, t_point *lastPlace)
{
    int ox = block.ox;
    int oy = block.oy;
    int x;
    x = 0;
    int y; 
    y = 0;
    char *lett = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    mapSize -= 1;
    if (block.point[0].y > mapSize || \
    block.point[0].x > mapSize || \
    block.point[1].y > mapSize || \
    block.point[1].x > mapSize || \
	block.point[2].y > mapSize || \
    block.point[2].x > mapSize || \
    block.point[3].y > mapSize || \
    block.point[3].x > mapSize)
		return (-1);
    

    while (y < mapSize + 1)
    {
        while (x < mapSize + 1)
        {  
            if ((map[y + block.point[0].y + oy][x + block.point[0].x + ox] == '.')&& \
                (map[y + block.point[1].y + oy][x + block.point[1].x + ox] == '.')&& \
			    (map[y + block.point[2].y + oy][x + block.point[2].x + ox] == '.')&& \
                (map[y + block.point[3].y + oy][x + block.point[3].x + ox] == '.')&& 
                y + block.point[0].y + oy <= mapSize && y + block.point[1].y + oy <= mapSize \
                && y + block.point[2].y + oy <= mapSize && y + block.point[3].y + oy <= mapSize \
                && x + block.point[0].x + ox <= mapSize && x + block.point[1].x + ox <= mapSize \
                && x + block.point[2].x + ox <= mapSize && x + block.point[3].x + ox <= mapSize)
            {
                lastPlace->x = x + block.point[0].x + ox;
                lastPlace->y = y + block.point[0].y + oy;

                map[y + block.point[3].y + oy][x + block.point[3].x + ox] = lett[l];
                map[y + block.point[2].y + oy][x + block.point[2].x + ox] = lett[l];
                map[y + block.point[1].y + oy][x + block.point[1].x + ox] = lett[l];
                map[y + block.point[0].y + oy][x + block.point[0].x + ox] = lett[l];

                l++;
               
                return (1);
            }
           x++;
        }
        x = 0;
        y++;
    }
	
     if (block.point[3].y >= y || block.point[3].x >= y)
         return (-1);

    return (0);
}


int         checker(char map[17][17], t_block block, int mapSize, t_point *lastPlace, int i)
{

    int x;
    x = 0;
    int y; 
    y = 0;
    char *lett = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    mapSize -= 1;
    while (y < mapSize + 1)
    {
        while (x < mapSize + 1)
        {  
                
            if ((map[y + block.point[0].y][x + block.point[0].x] == lett[i])&& \
                (map[y + block.point[1].y][x + block.point[1].x] == lett[i])&& \
			    (map[y + block.point[2].y][x + block.point[2].x] == lett[i])&& \
                (map[y + block.point[3].y][x + block.point[3].x] == lett[i])&& 
                y + block.point[0].y <= mapSize && y + block.point[1].y <= mapSize \
                && y + block.point[2].y <= mapSize && y + block.point[3].y <= mapSize \
                && x + block.point[0].x <= mapSize && x + block.point[1].x <= mapSize \
                && x + block.point[2].x <= mapSize && x + block.point[3].x <= mapSize)
            {
                lastPlace->x = x + block.point[0].x;
                lastPlace->y = y + block.point[0].y;

                map[y + block.point[0].y][x + block.point[0].x] = '.';
                map[y + block.point[1].y][x + block.point[1].x] = '.';
			    map[y + block.point[2].y][x + block.point[2].x] = '.';
                map[y + block.point[3].y][x + block.point[3].x] = '.';
                return (1);
            }
           x++;
        }
        x = 0;
        y++;
    }
    return (0);
}
/*
    prototype void redo(t_block block, int x, int y)
    Description: increases the x or y value of a block given an undo transformation.
*/
void     redo(t_block *block, int x, int y)
{  
    if( x > y)
        block->ox += 1;
    else
    {
        block->ox = 0;
        block->oy += 1;
    }
}   

int     undo(t_block *block, char map[17][17], int x, int y, int mapMax)
{

            x = (x - block->point[0].x) + block->point[3].x;
            y = (y - block->point[0].y) + block->point[3].y;

            if (x < mapMax - 1 && map[y][x + 1] == '.')
            {
				//Move block to the right
                redo(block, 1, 0);
            }
            else if (y < mapMax - 1 && map[y + 1][x] == '.')
            {
				//Move block down
                redo(block, 0, 1);   
            }
            else
                return (0);
        
            return (1);
}
/*
    prototype void  tetriMap(char **map, t_block *blocks, int mapMax)
    Description: for the dimensions of the map, each block is paced in the left upper
        most position. If a position is unavailable then it is tansformed in the x direction 
        checks spacing and repeats until it can be placed.
*/
void    tetriMap(char map[17][17], t_block *blocks, int index, int mapMax, int i, t_point lastPlace)
{    

	int ret = 0;
    int x = lastPlace.x;
    int y = lastPlace.y;

    while ( i != index) 
    {

        if ((ret = (checkMap(map, blocks[i], mapMax, i, &lastPlace))) > 0)
        {
            i++;
        }
		else if (ret == -1 )
            mapMax++;
        else
        {

            i--;
            checker(map, blocks[i], mapMax, &lastPlace, i);
            x = lastPlace.x;
			y = lastPlace.y;
            while(!undo(&blocks[i], map, x, y, mapMax))
            {
                i--;
                checker(map, blocks[i], mapMax, &lastPlace, i);
                x = lastPlace.x;
                y = lastPlace.y;
                
                if (i < 0)
                {
                    mapMax++;
                    i = 0;
                    break;
                }
            }
        }
    }
    printMapPls(map,mapMax);
}

void    printMap(int index, t_block *blocks)
{
    int i;
    int dimMap;
    char map[17][17];
	t_point lastpoint;
	lastpoint.x = 0;
	lastpoint.y = 0;
    t_point dimPrint;
    dimMap = 2;
    dimPrint.x = 0;
    dimPrint.y = 0;
    i = 0;
    
    while (i < index)
    {
        /* This set of if statements finds space taken of tetris blocks */
        if (dimPrint.x <= dimPrint.y)
        {
            dimPrint.x += blocks[i].x_dim;
            if (blocks[i].y_dim > dimPrint.y || dimPrint.y== 0)
                dimPrint.y = blocks[i].y_dim;
        }
        else
        {
            dimPrint.y += blocks[i].y_dim;
            if (blocks[i].x_dim > dimPrint.x || dimPrint.x == 0)
                dimPrint.x = blocks[i].x_dim;
        }
        i++;
    }
    if (dimPrint.x > dimPrint.y)
        dimMap = dimPrint.x;
    else
        dimMap = dimPrint.y;
    /* After the max dimensions have been found, we can place init and place on map */
    /* Initialize a map for places tetri */
    i = 0;
    initMap(map, 17);
    tetriMap(map,blocks, index, 2, i, lastpoint);
    /* places tetri on map */
    printf("HOLY MOTHER LOAD\n");
}

int     readTetri(int fileDesc, t_block blocks[26])
{
    char    *line;
    int     index;
    int     count;
    int     spaces;
    int     y;

    y = 0;
    index = 0;
    count = 0;
    spaces = 0;
    while (get_next_line(fileDesc,&line))
    {
        if(line == NULL && spaces % 5 != 0)
            return (-1);
        if(addBlockLine(&blocks[index], line, &count, y) > 0)
        {
            y++;
            if (y % 4 == 0)
            {   
                if (count > 4)
                    return (0);
                count = 0;
                y = 0;
                if (checkFormat(blocks[index]) <= 0)
                    return (0);
                index++;
            }
        }
        // else
        //     return (0);
        spaces++;
    }
    if (index == 1 && spaces > 0)
        return (-1);
    return (index);
}

int main(int argc, char** argv)
{
    /* Variables */ 
    int fileDesc; 
    //char *temp; 
    int y;
    int index;
    //int i = 0;
    int ret;
    //int d_n = 0; 

    fileDesc = 0;
    ret = 42;
    y = 0;
    index = 0;
    t_block blocks[26];
    //t_block *blocks;
    if (argc != 2)
    {
        ft_putstr("Usage: fillit input file\n");
        return (1);
    }
    if((index = readTetri(open(argv[1], O_RDONLY), blocks)) == 0 )
    {
        ft_putstr("error\n");
        return (1);
    }

    for (int k = 0; k < index; k++)
    {
        if (!checkDim(&blocks[k]))
        {
            printf("Error Bad formatting! Shame on you!\n");
            return (0);
        }
    }
    close(fileDesc);
    printMap(index, blocks);
    return (0);
}